NORMAS :
-	Jugador vs maquina
-	Tablero 10x10


Colocar barcos (fija o aleatoria mejor)

9 barcos: 
     *4 barcos de 1 
    * 3 barcos de 2 
    * 2 barcos de 3 
    * 1 barco de 4 

2 tableros (jugador y maquina)

Jugador dispara a coordenada  acierto  continua

Maquina dispara aleatorio  acierto  continua

Alguien tiene todos los barcos con X  fin del juego.

CONSTANTES (variables que no cambian)
-	Barcos
-	Dimensiones
-	Etc

CLASE TABLERO

1)	Asignar
-	Id jugador
-	Dimensiones (de la constante Dimensiones)
-	Barcos (de la constante Barcos)  pasar, por ejemplo, un diccionario donde especifiques el nombre de tus barcos, y la eslora de cada uno
-	Tablero sin barcos (array de numpy) vacio
-	Tablero maquina (array de numpy) con disparos efectuados
2)	Inicializar tablero (colocar barco)
-	Método de disparo coordenada:
o	Comprobar si había barco o agua o si ya se había disparado

MONTAR PROGRAMA desde main.py
Bucle while true
-	Inputs usuario
-	1°Poner mensaje bienvenida e instrucciones juego
-	Inicializar tableros, solo ejecutar una vez (al inicio)
-	Ejecutar el while que ira preguntando coordenadas
o	Si hay barco se marca y le vuelve a tocar al usuario
o	Elif: le toca a la maquina (sale coordenada obligatoria en tablero usuario).
-	Hasta que los barcos de un tablero (localización de barcos) se acaben
IDEA: ponemos barcos con o y cuando todos sean x se acaba?
-	En turno jugador imprimir tu tablero asi como el de la maquina
meter todas las funciones en funciones.py

RECOMENDACIONES

-	Recomendable la clase barco
-	Usar continue y break

    * main.py: donde corre todo el programa
    * clases.py: aquí irán las clases
    * funciones.py: aquí irán las funciones
    * variables.py: donde están declaradas las constantes

Para el print de los tableros :
    * Agua donde no se ha impactado
    * Agua donde se ha impactado
    * Barco donde no se ha impactado
    * Barco donde se ha impactado

Se recomienda en la clase tablero manejar dos arrays de 10x10. Uno con las coordenadas de los barcos y los impactos, que será tu tablero, lo que veas tu cuando imprimes tu tablero por pantalla. Y otro tablero SIN los barcos, únicamente con los impactos, para ver qué impactos has hecho en el tablero de la maquina.

Si vas a posicionar los barcos de manera aleatoria, tendrás que escoger unas coordenadas aleatoriamente, y una orientación N/S/E/O, de manera que si tu barco tiene 3 de eslora y la orientación es N, se posicionará hacia arriba, desde la posición inicial elegida aleatoriamente.

Si no tienes un nivel alto de Python, prueba primero a crear el array de numpy vacío y a colocar los barcos en unas posiciones concretas que nunca cambien, porque si lo haces aleatoriamente te será más complicado. No es justo como funciona el juego, pero mejor avanzar a quedarnos atascados al principio.

-Avisar si coordenadas fuera del tablero
-Opciones de salir del juego o que vuelva a imprimir las pantallas
-Niveles de dificultad
















ESQUEMA

Mensaje bienvenida
Input Inicializar juego pidiendo coordenadas (o salir del juego o imprimir tableros)
Sacar tablero maquina y el tuyo
While se haya tocado donde hay un barco:
-	Saca mensaje de correcto y pide otra coordenada (o salir del juego o imprimir tableros)
Si no:
-	Disparo aleatorio de la maquina
-	While se haya tocado donde hay un barco:
o	Sigue otro disparo aleatorio de la maquina
Si no:
-	Volvemos a pedir coordenadas (o salir del juego o imprimir tableros)

Ir rellenando los tableros hasta que la condición sea que donde están los barcos se rellene el o por X o algo asi

Funciones
-	Crear tablero vacio
-	Imprimir tablero
-	Colocar barco (los que están creados)
-	Disparos

Clase Tablero:
__init__
        self.jugador_id 
        self.dimensiones 
        self.tablero_con_barcos 
        self.tablero_disparos  

inicializar (self.tablero_con_barcos)
disparar coordenada (self.tablero_con_barcos y  self.tablero_disparos )
imprimir el tablero (self.tablero_disparos )

main 

implementar funciones con el bucle while no?



